asyncapi: '2.0.0'
info:
  title: Network Survey Messaging API
  version: '0.3.0'
  description: |
    The Network Survey Messaging API defines a set of messages that can be used to describe
    wireless survey related events. The messages range from cellular surveys such as GSM, CDMA,
    UMTS, and LTE, to simple RF energy detection events.

    While the most common use of these messages would be to send to an MQTT broker, this API specification
    simply defines the message schema. The transport or storage technology employed is purposefully left
    open to allow for these messages to flow over a variety of transports such as MQTT, gRPC, AMQP, etc.
    In addition, these messages can be written to disk by writing the JSON strings directly to a file to
    support unstructured data storage, or in a more structured approach such as a PostgreSQL or SQLite database.

    Officially, the message schema support for the Network Survey Messaging API are the JSON defined messags from this
    document. However, protobuf definitions of these messages have been created as a convinence for a couple of reasons.
    First, it can make generating the JSON compliant messages easier and also converting the JSON messages to language
    specific objects. Secondly, it can allow for sending the messages in protocol buffer format instead of JSON if a
    compressed binary format is needed. It also has the side effect of supporting sending these messages over gRPC if
    Remote Procedure Call support is of interest. Check out the [Network Survey Messaging Github README](https://github.com/christianrowlands/network-survey-messaging) for more details.
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'

servers:
  mosquitto:
    url: mqtt://test.mosquitto.org
    protocol: mqtt

defaultContentType: application/json

channels:
  gsm_message:
    description: The gsm_message topic/channel is where GSM survey records can be published. For MQTT, set the MQTT topic as "gsm_message" and then publish a JSON message representing a GSM survey record in the format defined below.
    publish:
      message:
        $ref: '#/components/messages/gsmRecord'

  cdma_message:
    description: The cdma_message topic/channel is where CDMA survey records can be published. For MQTT, set the MQTT topic as "cdma_message" and then publish a JSON message representing a CDMA survey record in the format defined below.
    publish:
      message:
        $ref: '#/components/messages/cdmaRecord'

  umts_message:
    description: The umts_message topic/channel is where UMTS survey records can be published. For MQTT, set the MQTT topic as "umts_message" and then publish a JSON message representing a UMTS survey record in the format defined below.
    publish:
      message:
        $ref: '#/components/messages/umtsRecord'

  lte_message:
    description: The lte_message topic/channel is where LTE survey records can be published. For MQTT, set the MQTT topic as "lte_message" and then publish a JSON message representing an LTE survey record in the format defined below.
    publish:
      message:
        $ref: '#/components/messages/lteRecord'

  wifi_beacon_message:
    description: The wifi_beacon_message topic/channel is where 802.11 beacon survey records can be published. For MQTT, set the MQTT topic as "wifi_beacon_message" and then publish a JSON message representing an 802.11 Access Point survey record in the format defined below.
    publish:
      message:
        $ref: '#/components/messages/wifiBeaconRecord'

  gnss_message:
    description: The gnss_message topic/channel is where GNSS positioning records can be published. For MQTT, set the MQTT topic as "gnss_message" and then publish a JSON message in the format defined below.
    publish:
      message:
        $ref: '#/components/messages/gnssRecord'

  energy_detection_message:
    description: The energy_detection_message topic/channel is where RF energy detection records can be published. For MQTT, set the MQTT topic as "energy_detection_message" and then publish a JSON message in the format defined below.
    publish:
      message:
        $ref: '#/components/messages/energyDetection'

  signal_detection_message:
    description: The signal_detection_message topic/channel is where signal detection records can be published. For MQTT, set the MQTT topic as "signal_detection_message" and then publish a JSON message in the format defined below.
    publish:
      message:
        $ref: '#/components/messages/signalDetection'

  device_status_message:
    description: The device_status_message topic/channel is where device status records can be published. For MQTT, set the MQTT topic as "device_status_message" and then publish a JSON message in the format defined below.
    publish:
      message:
        $ref: '#/components/messages/deviceStatus'

  lte_ota_message:
    description: The lte_ota_message topic/channel is where Over The Air (OTA) LTE messages can be published. For MQTT, set the MQTT topic as "lte_ota_message" and then publish a JSON message representing an OTA LTE message.
    publish:
      message:
        $ref: '#/components/messages/lteRrc'

components:
  messages:
    gsmRecord:
      name: GsmRecord
      title: GSM Record
      summary: Represents information recorded about a GSM tower at a particular time and geographic location.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/gsmRecordPayload'

    cdmaRecord:
      name: CdmaRecord
      title: CDMA Record
      summary: Represents information recorded about a CDMA tower at a particular time and geographic location.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/cdmaRecordPayload'

    umtsRecord:
      name: UmtsRecord
      title: UMTS Record
      summary: Represents information recorded about a UMTS NodeB at a particular time and geographic location.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/umtsRecordPayload'

    lteRecord:
      name: LteRecord
      title: LTE Record
      summary: Represents information recorded about an LTE eNodeB at a particular time and geographic location.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/lteRecordPayload'

    wifiBeaconRecord:
      name: WifiBeaconRecord
      title: Wi-Fi Beacon Record
      summary: Represents information recorded about an 802.11 Access Point at a particular time and geographic location. 802.11 Beacon frames are sent by Access Points to advertise their existence and to provide all the necessary connection information. This message represents a capture of a signal 802.11 Beacon message.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/wifiBeaconRecordPayload'

    gnssRecord:
      name: GnssRecord
      title: GNSS Record
      summary: Represents information recorded about a Global Navigation Sattelite System (GNSS) at a particular time and geographic location. Each record represents a single navigation message from a single satellite. These individual records are tied together using the group number field.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/gnssRecordPayload'

    energyDetection:
      name: EnergyDetection
      title: Energy Detection
      summary: Represents a General Purpose Radio (GPR) Energy Detection event. This survey record represents a general RF/PTT energy detection (i.e. RF energy was detected above a pre-defined threshold).
      contentType: application/json
      payload:
        $ref: '#/components/schemas/energyDetectionPayload'

    signalDetection:
      name: SignalDetection
      title: Signal Detection
      summary: Represents a General Purpose Radio (GPR) Signal Detection event. This survey record represents RF detections where the modulation and/or signal type could be determined. If both the modulation and signal type are unknown, then use the `energy_detection_message` instead.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/signalDetectionPayload'

    deviceStatus:
      name: DeviceStatus
      title: Device Status
      summary: Represents a status message sent from the device to report its current state or to act as a heartbeat. The interval of this message can vary depending on use case.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/deviceStatusPayload'

    lteRrc:
      name: LteRrc
      title: LTE RRC OTA Message
      summary: Represents a raw LTE RRC message sent Over The Air (OTA) between an LTE eNodeB and an LTE UE.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/lteRrcPayload'

  schemas:
    gsmRecordPayload:
      type: object
      required:
        - version
        - messageType
        - data
      properties:
        version:
          $ref: '#/components/schemas/version'
        messageType:
          $ref: '#/components/schemas/messageType'
          description: The type of message, must be GsmRecord.
          example: "GsmRecord"

        data:
          type: object
          description: The payload of this message that contains all the message data.
          required:
            - deviceSerialNumber
            - deviceName
            - deviceTime
            - missionId
            - recordNumber
            - groupNumber
            - arfcn
            - bsic
            - signalStrength
          properties:
            deviceSerialNumber:
              $ref: '#/components/schemas/deviceSerialNumber'
            deviceName:
              $ref: '#/components/schemas/deviceName'
            deviceTime:
              $ref: '#/components/schemas/deviceTime'
            latitude:
              $ref: '#/components/schemas/latitude'
            longitude:
              $ref: '#/components/schemas/longitude'
            altitude:
              $ref: '#/components/schemas/altitude'
            missionId:
              $ref: '#/components/schemas/missionId'
            recordNumber:
              $ref: '#/components/schemas/recordNumber'
            groupNumber:
              $ref: '#/components/schemas/groupNumber'

            mcc:
              $ref: '#/components/schemas/mcc'
              example: 310
            mnc:
              $ref: '#/components/schemas/mnc'
              example: 410
            lac:
              $ref: '#/components/schemas/lac'
            ci:
              $ref: '#/components/schemas/ci'
            arfcn:
              $ref: '#/components/schemas/arfcn'
            bsic:
              $ref: '#/components/schemas/bsic'
            signalStrength:
              $ref: '#/components/schemas/signalStrength'
            ta:
              $ref: '#/components/schemas/ta'
            servingCell:
              $ref: '#/components/schemas/servingCell'
            provider:
              $ref: '#/components/schemas/provider'
              example: "ATT"

    cdmaRecordPayload:
      type: object
      required:
        - version
        - messageType
        - data
      properties:
        version:
          $ref: '#/components/schemas/version'
        messageType:
          $ref: '#/components/schemas/messageType'
          description: The type of message, must be CdmaRecord.
          example: "CdmaRecord"

        data:
          type: object
          description: The payload of this message that contains all the message data.
          required:
            - deviceSerialNumber
            - deviceName
            - deviceTime
            - missionId
            - recordNumber
            - groupNumber
            - channel
            - pnOffset
            - ecio
          properties:
            deviceSerialNumber:
              $ref: '#/components/schemas/deviceSerialNumber'
            deviceName:
              $ref: '#/components/schemas/deviceName'
            deviceTime:
              $ref: '#/components/schemas/deviceTime'
            latitude:
              $ref: '#/components/schemas/latitude'
            longitude:
              $ref: '#/components/schemas/longitude'
            altitude:
              $ref: '#/components/schemas/altitude'
            missionId:
              $ref: '#/components/schemas/missionId'
            recordNumber:
              $ref: '#/components/schemas/recordNumber'
            groupNumber:
              $ref: '#/components/schemas/groupNumber'

            sid:
              $ref: '#/components/schemas/sid'
            nid:
              $ref: '#/components/schemas/nid'
            zone:
              $ref: '#/components/schemas/zone'
            bsid:
              $ref: '#/components/schemas/bsid'
            channel:
              $ref: '#/components/schemas/channel'
            pnOffset:
              $ref: '#/components/schemas/pnOffset'
            signalStrength:
              $ref: '#/components/schemas/signalStrength'
            ecio:
              $ref: '#/components/schemas/ecio'
            servingCell:
              $ref: '#/components/schemas/servingCell'
            provider:
              $ref: '#/components/schemas/provider'

    umtsRecordPayload:
      type: object
      required:
        - version
        - messageType
        - data
      properties:
        version:
          $ref: '#/components/schemas/version'
        messageType:
          $ref: '#/components/schemas/messageType'
          description: The type of message, must be UmtsRecord.
          example: "UmtsRecord"

        data:
          type: object
          description: The payload of this message that contains all the message data.
          required:
            - deviceSerialNumber
            - deviceName
            - deviceTime
            - missionId
            - recordNumber
            - groupNumber
            - uarfcn
            - psc
            - rscp
          properties:
            deviceSerialNumber:
              $ref: '#/components/schemas/deviceSerialNumber'
            deviceName:
              $ref: '#/components/schemas/deviceName'
            deviceTime:
              $ref: '#/components/schemas/deviceTime'
            latitude:
              $ref: '#/components/schemas/latitude'
            longitude:
              $ref: '#/components/schemas/longitude'
            altitude:
              $ref: '#/components/schemas/altitude'
            missionId:
              $ref: '#/components/schemas/missionId'
            recordNumber:
              $ref: '#/components/schemas/recordNumber'
            groupNumber:
              $ref: '#/components/schemas/groupNumber'

            mcc:
              $ref: '#/components/schemas/mcc'
              example: 310
            mnc:
              $ref: '#/components/schemas/mnc'
              example: 260
            lac:
              $ref: '#/components/schemas/lac'
            cid:
              $ref: '#/components/schemas/cid'
            uarfcn:
              $ref: '#/components/schemas/uarfcn'
            psc:
              $ref: '#/components/schemas/psc'
            rscp:
              $ref: '#/components/schemas/rscp'
            signalStrength:
              $ref: '#/components/schemas/signalStrength'
            servingCell:
              $ref: '#/components/schemas/servingCell'
            provider:
              $ref: '#/components/schemas/provider'
              example: "T-Mobile"

    lteRecordPayload:
      type: object
      required:
        - version
        - messageType
        - data
      properties:
        version:
          $ref: '#/components/schemas/version'
        messageType:
          $ref: '#/components/schemas/messageType'
          description: The type of message, must be LteRecord.
          example: "LteRecord"

        data:
          type: object
          description: The payload of this message that contains all the message data.
          required:
            - deviceSerialNumber
            - deviceName
            - deviceTime
            - missionId
            - recordNumber
            - groupNumber
            - earfcn
            - pci
            - rsrp
          properties:
            deviceSerialNumber:
              $ref: '#/components/schemas/deviceSerialNumber'
            deviceName:
              $ref: '#/components/schemas/deviceName'
            deviceTime:
              $ref: '#/components/schemas/deviceTime'
            latitude:
              $ref: '#/components/schemas/latitude'
            longitude:
              $ref: '#/components/schemas/longitude'
            altitude:
              $ref: '#/components/schemas/altitude'
            missionId:
              $ref: '#/components/schemas/missionId'
            recordNumber:
              $ref: '#/components/schemas/recordNumber'
            groupNumber:
              $ref: '#/components/schemas/groupNumber'

            mcc:
              $ref: '#/components/schemas/mcc'
            mnc:
              $ref: '#/components/schemas/mnc'
            tac:
              $ref: '#/components/schemas/tac'
            eci:
              $ref: '#/components/schemas/eci'
            earfcn:
              $ref: '#/components/schemas/earfcn'
            pci:
              $ref: '#/components/schemas/pci'
            rsrp:
              $ref: '#/components/schemas/rsrp'
            rsrq:
              $ref: '#/components/schemas/rsrq'
            ta: # Defining it directly in LTE so it does not conflict with the GSM TA
              type: integer
              format: int32
              minimum: 0
              maximum: 1282
              description: LTE Timing Advance, corresponding to the timing offset a mobile phone needs to use when transmitting a signal to the tower. Valid range 0-1282.
              example: 27
            signalStrength:
              $ref: '#/components/schemas/signalStrength'
            servingCell:
              $ref: '#/components/schemas/servingCell'
            lteBandwidth:
              $ref: '#/components/schemas/lteBandwidth'
            provider:
              $ref: '#/components/schemas/provider'

    wifiBeaconRecordPayload:
      type: object
      required:
        - version
        - messageType
        - data
      properties:
        version:
          $ref: '#/components/schemas/version'
        messageType:
          $ref: '#/components/schemas/messageType'
          description: The type of message, must be WifiBeaconRecord.
          example: "WifiBeaconRecord"

        data:
          type: object
          description: The payload of this message that contains all the message data.
          required:
            - deviceSerialNumber
            - deviceName
            - deviceTime
            - missionId
            - recordNumber
            - bssid
          properties:
            deviceSerialNumber:
              $ref: '#/components/schemas/deviceSerialNumber'
            deviceName:
              $ref: '#/components/schemas/deviceName'
            deviceTime:
              $ref: '#/components/schemas/deviceTime'
            latitude:
              $ref: '#/components/schemas/latitude'
            longitude:
              $ref: '#/components/schemas/longitude'
            altitude:
              $ref: '#/components/schemas/altitude'
            missionId:
              $ref: '#/components/schemas/missionId'
            recordNumber:
              $ref: '#/components/schemas/recordNumber'

            sourceAddress:
              $ref: '#/components/schemas/sourceAddress'
            destinationAddress:
              $ref: '#/components/schemas/destinationAddress'
            bssid:
              $ref: '#/components/schemas/bssid'

            beaconInterval:
              $ref: '#/components/schemas/beaconInterval'
            serviceSetType:
              $ref: '#/components/schemas/serviceSetType'
            ssid:
              $ref: '#/components/schemas/ssid'
            supportedRates:
              $ref: '#/components/schemas/supportedRates'
            extendedSupportedRates:
              $ref: '#/components/schemas/extendedSupportedRates'
            cipherSuites:
              $ref: '#/components/schemas/cipherSuites'
            akmSuites:
              $ref: '#/components/schemas/akmSuites'
            encryptionType:
              $ref: '#/components/schemas/encryptionType'
            wps:
              $ref: '#/components/schemas/wps'

            channel: # Defining it directly so it does not conflict with the channel field from other messages
              type: integer
              format: int32
              minimum: 0
              description: The channel on which this 802.11 frame was recorded.
              example: 2
            frequencyMhz: # Defining it directly so it does not conflict with the frequency field from other messages
              type: integer
              format: int32
              minimum: 0
              description: The frequency in MHz on which this 802.11 frame was recorded.
              example: 2417
            signalStrength:
              $ref: '#/components/schemas/signalStrength'
            snr:
              $ref: '#/components/schemas/snr'
            nodeType:
              $ref: '#/components/schemas/nodeType'
            standard:
              $ref: '#/components/schemas/standard'

    gnssRecordPayload:
      type: object
      required:
        - version
        - messageType
        - data
      properties:
        version:
          $ref: '#/components/schemas/version'
        messageType:
          $ref: '#/components/schemas/messageType'
          description: The type of message, must be GnssRecord.
          example: "GnssRecord"

        data:
          type: object
          description: The payload of this message that contains all the message data.
          required:
            - deviceSerialNumber
            - deviceName
            - deviceTime
            - missionId
            - recordNumber
            - groupNumber
          properties:
            deviceSerialNumber:
              $ref: '#/components/schemas/deviceSerialNumber'
            deviceName:
              $ref: '#/components/schemas/deviceName'
            deviceTime:
              $ref: '#/components/schemas/deviceTime'
            latitude:
              $ref: '#/components/schemas/latitude'
            longitude:
              $ref: '#/components/schemas/longitude'
            altitude:
              $ref: '#/components/schemas/altitude'
            missionId:
              $ref: '#/components/schemas/missionId'
            recordNumber:
              $ref: '#/components/schemas/recordNumber'
            groupNumber:
              $ref: '#/components/schemas/groupNumber'
              description: Starts at 1 and each subsequent scan should have its number incremented by 1. Records with the same group number indicate they were all seen in the same "scan" for GNSS space vehicles.

            constellation:
              $ref: '#/components/schemas/constellation'
            spaceVehicleId:
              $ref: '#/components/schemas/spaceVehicleId'
            carrierFreqHz:
              $ref: '#/components/schemas/carrierFreqHz'
            clockOffset:
              $ref: '#/components/schemas/clockOffset'
            usedInSolution:
              $ref: '#/components/schemas/usedInSolution'
            undulationM:
              $ref: '#/components/schemas/undulationM'
            latitudeStdDevM:
              $ref: '#/components/schemas/latitudeStdDevM'
            longitudeStdDevM:
              $ref: '#/components/schemas/longitudeStdDevM'
            altitudeStdDevM:
              $ref: '#/components/schemas/altitudeStdDevM'
            agcDb:
              $ref: '#/components/schemas/agcDb'
            cn0DbHz:
              $ref: '#/components/schemas/cn0DbHz'
            hdop:
              $ref: '#/components/schemas/hdop'
            vdop:
              $ref: '#/components/schemas/vdop'

    energyDetectionPayload:
      type: object
      required:
        - version
        - messageType
        - data
      properties:
        version:
          $ref: '#/components/schemas/version'
        messageType:
          $ref: '#/components/schemas/messageType'
          description: The type of message, must be EnergyDetection.
          example: "EnergyDetection"

        data:
          type: object
          description: The payload of this message that contains all the message data.
          required:
            - deviceSerialNumber
            - deviceName
            - deviceTime
            - missionId
            - recordNumber
            - groupNumber
            - frequencyHz
            - signalStrength
          properties:
            deviceSerialNumber:
              $ref: '#/components/schemas/deviceSerialNumber'
            deviceName:
              $ref: '#/components/schemas/deviceName'
            deviceTime:
              $ref: '#/components/schemas/deviceTime'
            latitude:
              $ref: '#/components/schemas/latitude'
            longitude:
              $ref: '#/components/schemas/longitude'
            altitude:
              $ref: '#/components/schemas/altitude'
            missionId:
              $ref: '#/components/schemas/missionId'
            recordNumber:
              $ref: '#/components/schemas/recordNumber'
            groupNumber:
              $ref: '#/components/schemas/groupNumber'

            frequencyHz:
              $ref: '#/components/schemas/frequencyHz'

            bandwidthHz:
              $ref: '#/components/schemas/bandwidthHz'
            signalStrength:
              $ref: '#/components/schemas/signalStrength'
            snr:
              $ref: '#/components/schemas/snr'
            timeUp:
              $ref: '#/components/schemas/timeUp'
            durationSec:
              $ref: '#/components/schemas/durationSec'

    signalDetectionPayload:
      type: object
      required:
        - version
        - messageType
        - data
      properties:
        version:
          $ref: '#/components/schemas/version'
        messageType:
          $ref: '#/components/schemas/messageType'
          description: The type of message, must be SignalDetection.
          example: "SignalDetection"

        data:
          type: object
          description: The payload of this message that contains all the message data.
          required:
            - deviceSerialNumber
            - deviceName
            - deviceTime
            - missionId
            - recordNumber
            - groupNumber
            - frequencyHz
            - signalStrength
          properties:
            deviceSerialNumber:
              $ref: '#/components/schemas/deviceSerialNumber'
            deviceName:
              $ref: '#/components/schemas/deviceName'
            deviceTime:
              $ref: '#/components/schemas/deviceTime'
            latitude:
              $ref: '#/components/schemas/latitude'
            longitude:
              $ref: '#/components/schemas/longitude'
            altitude:
              $ref: '#/components/schemas/altitude'
            missionId:
              $ref: '#/components/schemas/missionId'
            recordNumber:
              $ref: '#/components/schemas/recordNumber'
            groupNumber:
              $ref: '#/components/schemas/groupNumber'

            frequencyHz:
              $ref: '#/components/schemas/frequencyHz'
            bandwidthHz:
              $ref: '#/components/schemas/bandwidthHz'
            signalStrength:
              $ref: '#/components/schemas/signalStrength'
            snr:
              $ref: '#/components/schemas/snr'
            timeUp:
              $ref: '#/components/schemas/timeUp'
            durationSec:
              $ref: '#/components/schemas/durationSec'
            modulation:
              $ref: '#/components/schemas/modulation'
            signalName:
              $ref: '#/components/schemas/signalName'

    deviceStatusPayload:
      type: object
      required:
        - version
        - messageType
        - data
      properties:
        version:
          $ref: '#/components/schemas/version'
        messageType:
          $ref: '#/components/schemas/messageType'
          description: The type of message, must be DeviceStatus.
          example: "DeviceStatus"

        data:
          type: object
          description: The payload of this message that contains all the message data.
          required:
            - deviceSerialNumber
            - deviceName
            - deviceTime
          properties:
            deviceSerialNumber:
              $ref: '#/components/schemas/deviceSerialNumber'
            deviceName:
              $ref: '#/components/schemas/deviceName'
            deviceTime:
              $ref: '#/components/schemas/deviceTime'
            latitude:
              $ref: '#/components/schemas/latitude'
            longitude:
              $ref: '#/components/schemas/longitude'
            altitude:
              $ref: '#/components/schemas/altitude'

            batteryLevelPercent:
              $ref: '#/components/schemas/batteryLevelPercent'
            error:
              $ref: '#/components/schemas/error'

    lteRrcPayload:
      type: object
      required:
        - version
        - messageType
        - data
      properties:
        version:
          $ref: '#/components/schemas/version'
        messageType:
          $ref: '#/components/schemas/messageType'
          description: The type of message, must be LteRrc.
          example: "LteRrc"

        data:
          type: object
          description: The payload of this message that contains all the message data.
          required:
            - deviceSerialNumber
            - deviceName
            - deviceTime
            - missionId
            - channelType
            - rawMessage
          properties:
            deviceSerialNumber:
              $ref: '#/components/schemas/deviceSerialNumber'
            deviceName:
              $ref: '#/components/schemas/deviceName'
            deviceTime:
              $ref: '#/components/schemas/deviceTime'
            latitude:
              $ref: '#/components/schemas/latitude'
            longitude:
              $ref: '#/components/schemas/longitude'
            altitude:
              $ref: '#/components/schemas/altitude'
            missionId:
              $ref: '#/components/schemas/missionId'

            channelType:
              $ref: '#/components/schemas/channelType'
              example: "BCCH_BCH"
              enum:
                - "UNKNOWN"
                - "DL_CCCH"
                - "DL_DCCH"
                - "UL_CCCH"
                - "UL_DCCH"
                - "BCCH_BCH"
                - "BCCH_DL_SCH"
                - "PCCH"
                - "MCCH"
                - "BCCH_BCH_MBMS"
                - "BCCH_DL_SCH_BR"
                - "BCCH_DL_SCH_MBMS"
                - "SC_MCCH"
                - "SBCCH_SL_BCH"
                - "SBCCH_SL_BCH_V2X"
                - "DL_CCCH_NB"
                - "DL_DCCH_NB"
                - "UL_CCCH_NB"
                - "UL_DCCH_NB"
                - "BCCH_BCH_NB"
                - "BCCH_BCH_TDD_NB"
                - "BCCH_DL_SCH_NB"
                - "PCCH_NB"
                - "SC_MCCH_NB"
            rawMessage:
              $ref: '#/components/schemas/rawMessage'


    # Common fields that are used in almost every message
    version:
      type: string
      description: The version number of the Network Survey Messaging API that this message is based off of.
      example: "0.3.0"

    messageType:
      type: string
      description: The type of this message. This value must match the message name or the message will not be interpreted correctly.

    deviceSerialNumber:
      type: string
      description: The unique identifier for the device that captured this record. This should be consistent and should never change.
      example: "1234"

    deviceName:
      type: string
      description: A human readable name assigned to the device that captured this record. This value can change and is typically used as a human friendly display name.
      example: "Craxiom Pixel"

    deviceTime:
      type: string
      format: date-time
      description: The timestamp of when this message was created in milliseconds formatted as an [RFC3339 date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14). For example, `'1996-12-19T16:39:57-08:00'`.
      example: 1996-12-19T16:39:57-08:00

    #location:
    #  $ref: './point.json#'
    #  description: The location representing where this survey record was recorded. This location follows the GeoJSON format for a Point https://geojson.org/ , https://geojson.org/schema/Point.json. Specifically, the coordinates are in the format [longitude, latitude, altitude], with altitude (meters) being optional.
    #  id: https://geojson.org/schema/Point.json
    #  example: {"type": "Point","coordinates": [ -0.486594, 51.470334, 13.3]}

    latitude:
      type: number
      format: double
      description: The latitude representing where this survey record was recorded.
      example: 51.470334

    longitude:
      type: number
      format: double
      description: The longitude representing where this survey record was recorded.
      example: -0.486594

    altitude:
      type: number
      format: float
      description: The altitude in meters above MSL representing where this survey record was recorded.
      example: 13.3

    missionId:
      type: string
      description: A unique name for this particular run of a survey. The timestamp of when the survey was started is typically included, or the mission ID might contain a user entered value to enable them to uniquely identify the purpose of this survey.
      example: "Survey1 20200724-154325"

    recordNumber:
      type: integer
      format: int32
      minimum: 1
      description: Starts at 1 and each subsequent record should have its number incremented by 1.

    groupNumber:
      type: integer
      format: int32
      minimum: 1
      description: Starts at 1 and each subsequent scan should have its number incremented by 1. For simple frequency sweeps, all detections in the same sweep should have the same group number. For cellular surveys, each scan of the serving cell and neighbor cells should have the same group number.

    signalStrength:
      type: number
      format: float
      minimum: -200
      maximum: 200
      description: The signal strength of the received signal in dBm.
      example: -73


    # Common cellular fields
    provider:
      type: string
      description: The company providing the cellular service.
      example: "Verizon"

    mcc:
      type: integer
      format: int32
      minimum: 0
      description: Mobile Country Code, 3 digits.
      example: 311

    mnc:
      type: integer
      format: int32
      minimum: 0
      description: Mobile Network Code, used in conjunction with MCC (PLMN) to identify a carrier, 2 to 3 digits.
      example: 480

    servingCell:
      type: boolean
      description: Boolean indicating if this record represents a serving cell record, or a neighbor cell record.  If the field is unset then it is unknown if this record is for the serving cell or a neighbor cell. A value of true indicates that the record represents a serving cell, a value of false indicates a neighbor record.


    # GSM specific fields
    lac:
      type: integer
      format: int32
      minimum: 0
      maximum: 65535
      description: Location Area Code, location code inside a PLMN, valid range 0-65535.
      example: 174

    ci:
      type: integer
      format: int32
      minimum: 0
      maximum: 65535
      description: Cell Identity of the measured cell, valid range 0-65535.
      example: 47241

    arfcn:
      type: integer
      format: int32
      minimum: 0
      description: Absolute Radio Frequency Channel Number, valid values defined in 3GPP TS 45.005 Release 10 Section 2.
      example: 557

    bsic:
      type: integer
      format: int32
      minimum: 0
      maximum: 63
      description: Base Station Identity Code, consists of NCC and BCC, valid range 0-63 (in octal). For example, a BSIC of 38 maps to an NCC of 4 and BCC of 6.
      example: 25

    ta:
      type: integer
      format: int32
      minimum: 0
      maximum: 63
      description: Timing Advance, corresponding to the timing offset a mobile phone needs to use when transmitting a signal to the tower.
      example: 4


    # CDMA specific field
    sid:
      type: integer
      format: int32
      minimum: 0
      maximum: 32767
      description: System Identification Number, 15 bit number that represents the service provider(s) a base station provides service to.
      example: 139

    nid:
      type: integer
      format: int32
      minimum: 0
      maximum: 65535
      description: Network Identification Number, 16 bit number that represents the network within a SID.
      example: 4

    zone:
      type: integer
      format: int32
      minimum: 0
      description: A collection of one or more base stations treated as a unit when determining whether a mobile station should perform zone-based registration.
      example: 232

    bsid:
      type: integer
      format: int32
      minimum: 0
      maximum: 65535
      description: Base Station Identifier.  Exclusively identifies a base station under a SID/NID.
      example: 12731

    channel:
      type: integer
      format: int32
      minimum: 0
      description: Channel number that corresponds to a frequency.
      example: 384

    pnOffset:
      type: integer
      format: int32
      minimum: 0
      maximum: 511
      description: Pseudo Random Noise, 0-511, used to differentiate sectors on base stations.
      example: 136

    ecio:
      type: number
      format: float
      description: Measure of the quality / cleanliness of the signal from the tower to the modem (signal to noise). Energy per chip to Interference power ratio measured in dB.
      example: -11.4


    # UMTS specific fields
    cid:
      type: integer
      format: int32
      minimum: 0
      maximum: 268435455
      description: The Cell Identity of the measured cell, 28 bits, the RNC-ID is the first 12 bits, and the C-ID is the last 16 bits, valid range 0-268435455. Defined in 3GPP TS 25.331.
      example: 61381

    uarfcn:
      type: integer
      format: int32
      minimum: 0
      maximum: 13096
      description: UTRA Absolute Radio Frequency Channel Number (Downlink), valid range 0-13096, defined in 3GPP TS 25.101 and 3GPP TS 25.102.
      example: 9800

    psc:
      type: integer
      format: int32
      minimum: 0
      maximum: 511
      description: Primary Scrambling Code, valid range 0-511.
      example: 141

    rscp:
      type: number
      format: float
      description: Reference Signal Code Power in dBm.
      example: -73


    # LTE specific fields
    tac:
      type: integer
      minimum: 0
      maximum: 65535
      description: Tracking Area Code, location code inside a PLMN, valid range 0-65535.
      example: 52803

    eci:
      type: integer
      minimum: 0
      maximum: 268435455
      description: ECI, the Cell Identity of the measured cell, 28 bits. The Macro eNB ID is the first 20 bits of the Cell Identity and the last 8 bits represent the sector. Valid range 0-268435455.
      example: 52824577

    earfcn:
      type: integer
      format: int32
      minimum: 0
      maximum: 65535
      description: Downlink E-UTRA Absolute Radio Frequency Channel Number, valid range 0-65535, defined in 3GPP TS 36.101 Section 5.7.3.
      example: 5230

    pci:
      type: integer
      format: int32
      minimum: 0
      maximum: 503
      description: Physical Cell Identity, valid range 0-503.
      example: 234

    rsrp:
      type: number
      format: float
      minimum: -140
      maximum: -44
      description: Reference Signal Received Power in dBm, valid range -44 to -140, corresponding to RSRP_97 to RSRP_00 respectively.
      example: -107

    rsrq:
      type: number
      format: float
      minimum: -19.5
      maximum: -3
      description: Reference Signal Received Quality in dB, valid range -3 to -19.5, corresponding to RSRQ_34 to RSRP_00 respectively.
      example: -11.0

    lteBandwidth:
      type: string
      description: "The LTE downlink bandwidth in MHz (one of 1.4, 3, 5, 10, 15, 20)."
      example: "MHZ_10"
      enum:
        - "UNKNOWN"
        - "MHZ_1_4"
        - "MHZ_3"
        - "MHZ_5"
        - "MHZ_10"
        - "MHZ_15"
        - "MHZ_20"


    # Wi-Fi specific fields
    sourceAddress:
      type: string
      description: Source MAC Address, the original source of the frame.
      example: "68:7F:74:B0:14:98"

    destinationAddress:
      type: string
      description: Destination MAC Address, the final destination of the frame.
      example: "68:7F:74:B0:14:22"

    bssid:
      type: string
      description: Basic Service Set Identifier, the MAC Address of the Access Point.
      example: "68:7F:74:B0:14:98"

    beaconInterval:
      type: integer
      format: int32
      minimum: 0
      description: Beacon Interval, in milliseconds. The rate at which beacon frames are sent from an Access Point advertising the existence of the AP.
      example: 100

    serviceSetType:
      type: string
      description: The Service Set Type that this node belongs to.
      example: "BSS"
      enum:
        - "UNKNOWN"
        - "BSS"
        - "ESS"
        - "BSS_ESS"
        - "IBSS"
        - "MBSS"

    ssid:
      type: string
      description: The Service Set Identifier (aka the Wi-Fi network name), UTF-8 Encoded.
      example: "My Wi-Fi Network"

    supportedRates:
      type: string
      description: A list of data rates supported by this device separated by semicolons.
      example: "1; 2; 5.5; 11; 18; 24; 36; 54"

    extendedSupportedRates:
      type: string
      description: An extended list of data rates supported by this device separated by semicolons.
      example: "6; 9; 12; 48"

    cipherSuites:
      type: array
      description: A list of the supported cipher suites. See IEEE Std 802.11-2012 Section 8.4.2.27.2 for more details on the 802.11 Cipher Suites.
      example: [ "TKIP", "CCMP" ]
      items:
        type: string
        enum:
          - "UNKNOWN"
          - "WEP_40"
          - "TKIP"
          - "CCMP"
          - "WEP_104"
          - "GCMP_128"
          - "GCMP_256"
          - "CCMP_256"
          - "BIP_GMAC_128"
          - "BIP_GMAC_256"
          - "BIP_CMAC_256"
          - "OPEN"
          - "WEP" # For the times where it is unknown if WEP_40 or WEP_104 is being employed.

    akmSuites:
      type: array
      description: A list of the supported Authentication and Key Management (AKM) suites. See IEEE Std 802.11-2012 Section 8.4.2.27.3 for more details on the 802.11 AKM Suites.
      example: [ "OPEN" ]
      items:
        type: string
        enum:
          - "UNKNOWN"
          - "IEEE_8021X"
          - "FT_IEEE_8021X"
          - "IEEE_8021X_SHA256"
          - "PSK"
          - "FT_PSK"
          - "PSK_SHA256"
          - "SAE"
          - "FT_SAE"
          - "TDLS"
          - "OPEN"

    encryptionType:
      type: string
      description: The encryption type used by the Access Point. This field should be kept in sync with the cipherSuites field as it is directly related.
      example: "WPA_WPA2"
      enum:
        - "UNKNOWN"
        - "OPEN"
        - "WEP"
        - "WPA"
        - "WPA_WPA2"
        - "WPA2"
        - "WPA3"

    wps:
      type: boolean
      description: Boolean indicating if this record represents a serving cell record, or a neighbor cell record.  If the field is unset then it is unknown if this record is for the serving cell or a neighbor cell. A value of true indicates that the record represents a serving cell, a value of false indicates a neighbor record.

    nodeType:
      type: string
      description: The type of station that sent this frame.
      example: "AP"
      enum:
        - "UNKNOWN"
        - "AP"
        - "NON_AP_STA"
        - "STA"

    standard:
      type: string
      description: The 802.11 standard being employed by the device.
      example: "IEEE80211N"
      enum:
        - "UNKNOWN"
        - "IEEE80211"
        - "IEEE80211A"
        - "IEEE80211B"
        - "IEEE80211G"
        - "IEEE80211BG"
        - "IEEE80211N"
        - "IEEE80211AC"
        - "IEEE80211AX"


    # GNSS specific fields
    constellation:
      type: string
      description: The satellite constellation associated with the record.
      example: "GALILEO"
      enum:
        - "UNKNOWN"
        - "GPS"
        - "GLONASS"
        - "GALILEO"
        - "BEIDOU"
        - "SBAS"
        - "QZSS"
        - "IRNSS"

    spaceVehicleId:
      type: integer
      format: int32
      minimum: 0
      description: The identifier for the space vehicle (SV).
      example: 2345

    carrierFreqHz:
      type: integer
      format: int64
      minumum: 1
      description: The carrier frequency utilized by the SV, in Hz.
      example: 120000000

    clockOffset:
      type: number
      format: double
      description: The clock offset calculated by the receiver based on the space-vehicle time contained in a received navigation message, i.e. the time it took for a given navigation message to be sent from a space vehicle to the receiver's antenna, as calculated by the receiver itself.
      example: 0.001

    usedInSolution:
      type: boolean
      description: Indicates whether this particular satellite data was used as part of the solution. A value of true indicates that the record was used in the solution, a value of false indiicates that the record was not used in the solution.

    undulationM:
      type: number
      format: float
      minimum: -150.0
      maximum: 150.0
      description: The height in meters of the geoid at a given point, relative to a given reference ellipsoid, i.e. the difference in height between the 'real' surface (ignoring topographical features) and a 'modeled' surface given by a reference ellipsoid such as the one defined by WGS84. Valid range, -150.0 to 150.0.
      example: 125.1

    latitudeStdDevM:
      type: number
      format: float
      minimum: 0
      description: The standard deviation of the latitude measurement in meters, where a higher value indicates a less precise postion lock. For example, a 5m deviaton indicates that, with 68% confidence, the latitude is within 5m of the reported position; with 95% confidence, the latitude is within 10m of the reported position, etc. This relates to the Horizontal Dilution of Precision (HDOP).
      example: 5.2

    longitudeStdDevM:
      type: number
      format: float
      minimum: 0
      description: The standard deviation of the longitude measurement in meters, where a higher value indicates a less precise position lock. For example, a 5m deviation indicates that, with 68% confidence, the longitude is within 5m of the reported position; with 95% confidence, the longitude is within 10m of the reported position, etc. This relates to the Horizontal Dilution of Precision (HDOP).
      example: 4.1

    altitudeStdDevM:
      type: number
      format: float
      minimum: 0
      description: The standatd deviation of the altitude measurement in meters, where a higher value indicates a less precise position lock. For example, a 5m deviation indicates that, with 68% confidence, the altitude is within 5m of the reported position; with 95% confidence, the altitude is within 10m of the reported position, etc. This releates to the Vertical Dilution of Poistion (VDOP), and tends to be higher than the Lat/Lon standard deviations due to GNSS satellites being above GNSS receivers.
      example: -122.1

    agcDb:
      type: number
      format: float
      minimum: -50.0
      maximum: 50.0
      description: Automatic Gain Control, measured in dB. Valid range, -50.0 to 50.0
      example: -25.2

    cn0DbHz:
      type: number
      format: float
      minimum: -100.0
      maximum: 100.0
      description: Carrier to noise density ratio, measured in dB-Hz. Valid range, -100.0 to 100.0.
      example: 1.1

    hdop:
      type: number
      format: float
      minimum: 0.0
      maximum: 50.0
      description: Horizontal Dilution of Precision. Valid range, 0.0 to 50.0.
      example: 1.2

    vdop:
      type: number
      format: float
      minimum: 0.0
      maximum: 50.0
      description: Vertical Dilution of Precision. Valid range, 0.0 to 50.0.
      example: 1.3


    # RF generic fields (used in both energy detection and signal detection)
    frequencyHz:
      type: integer
      format: int64
      minimum: 1
      description: The frequency, in Hz, that the radio signal was received on.
      example: 162000000

    bandwidthHz:
      type: integer
      format: int32
      minimum: 1
      description: The bandwidth, in Hz, of the received signal.
      example: 12500

    snr:
      type: number
      format: float
      description: The Signal to Noise Ratio of the received signal to the noise power measured in dB. A ratio higher than 1:1 (greater than 0 dB) indicates more signal than noise.
      example: 19.2

    timeUp:
      type: string
      format: date-time
      description: The date & time the energy/signal was detected as active. This is formatted as an [RFC3339 date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14). For example, `'1996-12-19T16:39:57-08:00'`.
      example: 1996-12-19T16:39:57-08:00

    durationSec:
      type: number
      format: float
      exclusiveMinimum: 0
      description: The duration of time, in seconds, that the signal was detected as active.
      example: 4.2

    # Signal Detection specific fields
    modulation:
      type: string
      description: The modulation type found on the received signal. It is appropriate to leave this blank if the modulation of the signal is unknown, but either the `modulation` or `signalName` field should be filled out. If neither of them are known then the `energyDetection` message should be used instead.
      example: 4FSK

    signalName:
      type: string
      description: The modulation type found on the received signal. It is appropriate to leave this blank if the modulation of the signal is unknown, but either the `modulation` or `signalName` field should be filled out. If neither of them are known then the `energyDetection` message should be used instead.
      example: DMR

    # Device Status specific fields
    batteryLevelPercent:
      type: integer
      format: int32
      minimum: 0
      maximum: 100
      description: The percentage of battery remaining (if the device has a battery).
      example: 86

    error:
      type: object
      description: If present, represents that the device is in an error state.
      required:
        - errorMessage
      properties:
        errorMessage:
          type: string
          description: A description of the error state that the device is in.
          example: "The scan stopped unexpectedly"

    # Common fields for Raw Cellular messages
    rawMessage:
      type: string
      format: byte
      description: The raw cellular message bytes encoded in base64. The bytes in this field are the raw message bytes captured from the Over The Air (OTA) cellular radio frame.
      example: "FA4wAO0BawMAAFk5BQAAAAAJAEABfGtfkSAAAA=="

    # LTE RRC specific fields
    channelType:
      type: string
      description: The channel type that this message was sent on. The channel type represents the logical channel that the raw cellular message was sent over.
